[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=2]
code = "shader_type spatial;
render_mode world_vertex_coords, depth_draw_alpha_prepass, cull_disabled, vertex_lighting;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;

uniform float CURVATURE;
uniform float CURVATURE_ACTIVE;
uniform float CURVATURE_DISTANCE;

void vertex() {
	if(CURVATURE_ACTIVE == 1.0) {
		NORMAL = (WORLD_MATRIX * vec4(NORMAL, 0.0)).xyz;
		float dist = length(CAMERA_MATRIX[3].xyz - VERTEX) / CURVATURE_DISTANCE;
		VERTEX.y -= pow(dist, CURVATURE);
	}
}

void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
}"

[resource]
shader = SubResource( 2 )
shader_param/albedo = Color( 0.396078, 0.662745, 0.67451, 1 )
shader_param/CURVATURE = 10.0
shader_param/CURVATURE_ACTIVE = 1.0
shader_param/CURVATURE_DISTANCE = 100.0
